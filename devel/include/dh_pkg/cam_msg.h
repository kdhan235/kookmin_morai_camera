// Generated by gencpp from file dh_pkg/cam_msg.msg
// DO NOT EDIT!


#ifndef DH_PKG_MESSAGE_CAM_MSG_H
#define DH_PKG_MESSAGE_CAM_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dh_pkg
{
template <class ContainerAllocator>
struct cam_msg_
{
  typedef cam_msg_<ContainerAllocator> Type;

  cam_msg_()
    : mission(0)
    , is_stop_flag(false)
    , is_dynamic_obs(false)
    , mission_time(0.0)  {
    }
  cam_msg_(const ContainerAllocator& _alloc)
    : mission(0)
    , is_stop_flag(false)
    , is_dynamic_obs(false)
    , mission_time(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _mission_type;
  _mission_type mission;

   typedef uint8_t _is_stop_flag_type;
  _is_stop_flag_type is_stop_flag;

   typedef uint8_t _is_dynamic_obs_type;
  _is_dynamic_obs_type is_dynamic_obs;

   typedef float _mission_time_type;
  _mission_time_type mission_time;





  typedef boost::shared_ptr< ::dh_pkg::cam_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dh_pkg::cam_msg_<ContainerAllocator> const> ConstPtr;

}; // struct cam_msg_

typedef ::dh_pkg::cam_msg_<std::allocator<void> > cam_msg;

typedef boost::shared_ptr< ::dh_pkg::cam_msg > cam_msgPtr;
typedef boost::shared_ptr< ::dh_pkg::cam_msg const> cam_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dh_pkg::cam_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dh_pkg::cam_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dh_pkg::cam_msg_<ContainerAllocator1> & lhs, const ::dh_pkg::cam_msg_<ContainerAllocator2> & rhs)
{
  return lhs.mission == rhs.mission &&
    lhs.is_stop_flag == rhs.is_stop_flag &&
    lhs.is_dynamic_obs == rhs.is_dynamic_obs &&
    lhs.mission_time == rhs.mission_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dh_pkg::cam_msg_<ContainerAllocator1> & lhs, const ::dh_pkg::cam_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dh_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dh_pkg::cam_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dh_pkg::cam_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dh_pkg::cam_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dh_pkg::cam_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dh_pkg::cam_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dh_pkg::cam_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dh_pkg::cam_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fed320ada716dbe6ac3b9244f0ae883";
  }

  static const char* value(const ::dh_pkg::cam_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fed320ada716dbeULL;
  static const uint64_t static_value2 = 0x6ac3b9244f0ae883ULL;
};

template<class ContainerAllocator>
struct DataType< ::dh_pkg::cam_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dh_pkg/cam_msg";
  }

  static const char* value(const ::dh_pkg::cam_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dh_pkg::cam_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 mission\n"
"bool is_stop_flag\n"
"bool is_dynamic_obs\n"
"float32 mission_time\n"
;
  }

  static const char* value(const ::dh_pkg::cam_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dh_pkg::cam_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission);
      stream.next(m.is_stop_flag);
      stream.next(m.is_dynamic_obs);
      stream.next(m.mission_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cam_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dh_pkg::cam_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dh_pkg::cam_msg_<ContainerAllocator>& v)
  {
    s << indent << "mission: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mission);
    s << indent << "is_stop_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_stop_flag);
    s << indent << "is_dynamic_obs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_dynamic_obs);
    s << indent << "mission_time: ";
    Printer<float>::stream(s, indent + "  ", v.mission_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DH_PKG_MESSAGE_CAM_MSG_H
