// Generated by gencpp from file Lidar_pkg/pointCloud.msg
// DO NOT EDIT!


#ifndef LIDAR_PKG_MESSAGE_POINTCLOUD_H
#define LIDAR_PKG_MESSAGE_POINTCLOUD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <Lidar_pkg/pointinfo.h>

namespace Lidar_pkg
{
template <class ContainerAllocator>
struct pointCloud_
{
  typedef pointCloud_<ContainerAllocator> Type;

  pointCloud_()
    : size(0)
    , points()  {
    }
  pointCloud_(const ContainerAllocator& _alloc)
    : size(0)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _size_type;
  _size_type size;

   typedef std::vector< ::Lidar_pkg::pointinfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::Lidar_pkg::pointinfo_<ContainerAllocator> >> _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::Lidar_pkg::pointCloud_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Lidar_pkg::pointCloud_<ContainerAllocator> const> ConstPtr;

}; // struct pointCloud_

typedef ::Lidar_pkg::pointCloud_<std::allocator<void> > pointCloud;

typedef boost::shared_ptr< ::Lidar_pkg::pointCloud > pointCloudPtr;
typedef boost::shared_ptr< ::Lidar_pkg::pointCloud const> pointCloudConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Lidar_pkg::pointCloud_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Lidar_pkg::pointCloud_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Lidar_pkg::pointCloud_<ContainerAllocator1> & lhs, const ::Lidar_pkg::pointCloud_<ContainerAllocator2> & rhs)
{
  return lhs.size == rhs.size &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Lidar_pkg::pointCloud_<ContainerAllocator1> & lhs, const ::Lidar_pkg::pointCloud_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Lidar_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::Lidar_pkg::pointCloud_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Lidar_pkg::pointCloud_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Lidar_pkg::pointCloud_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Lidar_pkg::pointCloud_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Lidar_pkg::pointCloud_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Lidar_pkg::pointCloud_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Lidar_pkg::pointCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "606afa31f19383ae907939cc5ebf0442";
  }

  static const char* value(const ::Lidar_pkg::pointCloud_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x606afa31f19383aeULL;
  static const uint64_t static_value2 = 0x907939cc5ebf0442ULL;
};

template<class ContainerAllocator>
struct DataType< ::Lidar_pkg::pointCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Lidar_pkg/pointCloud";
  }

  static const char* value(const ::Lidar_pkg::pointCloud_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Lidar_pkg::pointCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 size\n"
"pointinfo[] points \n"
"\n"
"================================================================================\n"
"MSG: Lidar_pkg/pointinfo\n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 y_Min\n"
"float32 y_Max\n"
"int16 idx\n"
"float32 dist \n"
;
  }

  static const char* value(const ::Lidar_pkg::pointCloud_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Lidar_pkg::pointCloud_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.size);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pointCloud_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Lidar_pkg::pointCloud_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Lidar_pkg::pointCloud_<ContainerAllocator>& v)
  {
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::Lidar_pkg::pointinfo_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_PKG_MESSAGE_POINTCLOUD_H
