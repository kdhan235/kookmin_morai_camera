// Generated by gencpp from file code/min_idx.msg
// DO NOT EDIT!


#ifndef CODE_MESSAGE_MIN_IDX_H
#define CODE_MESSAGE_MIN_IDX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace code
{
template <class ContainerAllocator>
struct min_idx_
{
  typedef min_idx_<ContainerAllocator> Type;

  min_idx_()
    : min_idx(0)  {
    }
  min_idx_(const ContainerAllocator& _alloc)
    : min_idx(0)  {
  (void)_alloc;
    }



   typedef int32_t _min_idx_type;
  _min_idx_type min_idx;





  typedef boost::shared_ptr< ::code::min_idx_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::code::min_idx_<ContainerAllocator> const> ConstPtr;

}; // struct min_idx_

typedef ::code::min_idx_<std::allocator<void> > min_idx;

typedef boost::shared_ptr< ::code::min_idx > min_idxPtr;
typedef boost::shared_ptr< ::code::min_idx const> min_idxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::code::min_idx_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::code::min_idx_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::code::min_idx_<ContainerAllocator1> & lhs, const ::code::min_idx_<ContainerAllocator2> & rhs)
{
  return lhs.min_idx == rhs.min_idx;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::code::min_idx_<ContainerAllocator1> & lhs, const ::code::min_idx_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace code

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::code::min_idx_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::code::min_idx_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::code::min_idx_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::code::min_idx_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::code::min_idx_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::code::min_idx_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::code::min_idx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6115d68580f96e7315468c7a398d1b04";
  }

  static const char* value(const ::code::min_idx_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6115d68580f96e73ULL;
  static const uint64_t static_value2 = 0x15468c7a398d1b04ULL;
};

template<class ContainerAllocator>
struct DataType< ::code::min_idx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "code/min_idx";
  }

  static const char* value(const ::code::min_idx_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::code::min_idx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 min_idx\n"
;
  }

  static const char* value(const ::code::min_idx_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::code::min_idx_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.min_idx);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct min_idx_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::code::min_idx_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::code::min_idx_<ContainerAllocator>& v)
  {
    s << indent << "min_idx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.min_idx);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CODE_MESSAGE_MIN_IDX_H
